import { RecordsService } from './records.service';
import { Record } from './entities/record.entity';
import { CurrentUserInterface } from '../auth/current-user.interface';
export declare class RecordsController {
    private readonly recordsService;
    constructor(recordsService: RecordsService);
    create(body: Partial<Record>, user: CurrentUserInterface): Promise<Record>;
    assignBatch(body: {
        recordIds: string[];
        batchId: string;
    }): Promise<Record[]>;
    reviewRecord(id: string, status: 'Verified' | 'Flagged', user: CurrentUserInterface): Promise<Record | null>;
    updateRecord(id: string, body: Partial<Record>, user: CurrentUserInterface): Promise<Record>;
    lock(id: string, user: CurrentUserInterface): Promise<{
        reviewed_by_name: string | null;
        locked_by_name: string | null;
        assigned_to_name: string | null;
        entered_by_name: string | null;
        batch_name: string | null;
        id?: string | undefined;
        property_address?: string | undefined;
        transaction_date?: Date | undefined;
        borrower_name?: string | undefined;
        loan_officer_name?: string | undefined;
        loan_amount?: number | undefined;
        nmls_id?: number | undefined;
        loan_term?: number | undefined;
        sales_price?: number | undefined;
        down_payment?: number | undefined;
        apn?: string | undefined;
        status?: "Pending" | "Verified" | "Flagged" | undefined;
        locked_by?: string | null | undefined;
        lock_timestamp?: Date | null | undefined;
        entered_by?: string | undefined;
        entered_by_date?: Date | undefined;
        reviewed_by?: string | undefined;
        reviewed_by_date?: Date | undefined;
        created_at?: Date | undefined;
        updated_at?: Date | undefined;
        assigned_to?: string | null | undefined;
        batch_id?: string;
        batch?: import("../batches/entities/batch.entity").Batch;
        entered_by_user?: import("../users/entities/user.entity").User;
        assigned_to_user?: import("../users/entities/user.entity").User;
        reviewed_by_user?: import("../users/entities/user.entity").User;
        locked_by_user?: import("../users/entities/user.entity").User;
    } | null>;
    unlock(id: string, user: CurrentUserInterface): Promise<Record>;
    getMyRecords(page: number, limit: number, status: string, sortBy: 'created_at' | 'updated_at', user: CurrentUserInterface): Promise<{
        data: {
            reviewed_by: string | null;
            locked_by: string | null;
            assigned_to: string | null;
            entered_by: string | null;
            id: string;
            property_address: string;
            transaction_date: Date;
            borrower_name: string;
            loan_officer_name: string;
            loan_amount: number;
            nmls_id: number;
            loan_term: number;
            sales_price: number;
            down_payment: number;
            apn: string;
            status: "Pending" | "Verified" | "Flagged";
            lock_timestamp: Date | null;
            entered_by_date: Date;
            reviewed_by_date: Date;
            created_at: Date;
            updated_at: Date;
            batch_id?: string;
            batch?: import("../batches/entities/batch.entity").Batch;
            entered_by_user?: import("../users/entities/user.entity").User;
            assigned_to_user?: import("../users/entities/user.entity").User;
            reviewed_by_user?: import("../users/entities/user.entity").User;
            locked_by_user?: import("../users/entities/user.entity").User;
        }[];
        total: number;
        page: number;
        lastPage: number;
    }>;
    assignRecord(id: string, body: {
        userId: string;
    }): Promise<Record>;
    getUnassignedRecords(): Promise<Record[]>;
    getRecordsWithoutBatch(page?: number, limit?: number): Promise<{
        data: {
            reviewed_by: string | null;
            locked_by: string | null;
            assigned_to: string | null;
            entered_by: string | null;
            id: string;
            property_address: string;
            transaction_date: Date;
            borrower_name: string;
            loan_officer_name: string;
            loan_amount: number;
            nmls_id: number;
            loan_term: number;
            sales_price: number;
            down_payment: number;
            apn: string;
            status: "Pending" | "Verified" | "Flagged";
            lock_timestamp: Date | null;
            entered_by_date: Date;
            reviewed_by_date: Date;
            created_at: Date;
            updated_at: Date;
            batch_id?: string;
            batch?: import("../batches/entities/batch.entity").Batch;
            entered_by_user?: import("../users/entities/user.entity").User;
            assigned_to_user?: import("../users/entities/user.entity").User;
            reviewed_by_user?: import("../users/entities/user.entity").User;
            locked_by_user?: import("../users/entities/user.entity").User;
        }[];
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    }>;
    searchAllRecords(query: string, user: CurrentUserInterface): Promise<{
        reviewed_by: string | null;
        locked_by: string | null;
        assigned_to: string | null;
        entered_by: string | null;
        id: string;
        property_address: string;
        transaction_date: Date;
        borrower_name: string;
        loan_officer_name: string;
        loan_amount: number;
        nmls_id: number;
        loan_term: number;
        sales_price: number;
        down_payment: number;
        apn: string;
        status: "Pending" | "Verified" | "Flagged";
        lock_timestamp: Date | null;
        entered_by_date: Date;
        reviewed_by_date: Date;
        created_at: Date;
        updated_at: Date;
        batch_id?: string;
        batch?: import("../batches/entities/batch.entity").Batch;
        entered_by_user?: import("../users/entities/user.entity").User;
        assigned_to_user?: import("../users/entities/user.entity").User;
        reviewed_by_user?: import("../users/entities/user.entity").User;
        locked_by_user?: import("../users/entities/user.entity").User;
    }[]>;
    searchRecords(query: string, user: CurrentUserInterface): Promise<{
        reviewed_by: string | null;
        locked_by: string | null;
        assigned_to: string | null;
        entered_by: string | null;
        id: string;
        property_address: string;
        transaction_date: Date;
        borrower_name: string;
        loan_officer_name: string;
        loan_amount: number;
        nmls_id: number;
        loan_term: number;
        sales_price: number;
        down_payment: number;
        apn: string;
        status: "Pending" | "Verified" | "Flagged";
        lock_timestamp: Date | null;
        entered_by_date: Date;
        reviewed_by_date: Date;
        created_at: Date;
        updated_at: Date;
        batch_id?: string;
        batch?: import("../batches/entities/batch.entity").Batch;
        entered_by_user?: import("../users/entities/user.entity").User;
        assigned_to_user?: import("../users/entities/user.entity").User;
        reviewed_by_user?: import("../users/entities/user.entity").User;
        locked_by_user?: import("../users/entities/user.entity").User;
    }[]>;
    findAll(page?: number, limit?: number, status?: string, q?: string): Promise<{
        data: {
            reviewed_by: string | null;
            locked_by: string | null;
            assigned_to: string | null;
            entered_by: string | null;
            id: string;
            property_address: string;
            transaction_date: Date;
            borrower_name: string;
            loan_officer_name: string;
            loan_amount: number;
            nmls_id: number;
            loan_term: number;
            sales_price: number;
            down_payment: number;
            apn: string;
            status: "Pending" | "Verified" | "Flagged";
            lock_timestamp: Date | null;
            entered_by_date: Date;
            reviewed_by_date: Date;
            created_at: Date;
            updated_at: Date;
            batch_id?: string;
            batch?: import("../batches/entities/batch.entity").Batch;
            entered_by_user?: import("../users/entities/user.entity").User;
            assigned_to_user?: import("../users/entities/user.entity").User;
            reviewed_by_user?: import("../users/entities/user.entity").User;
            locked_by_user?: import("../users/entities/user.entity").User;
        }[];
        total: number;
        page: number;
        lastPage: number;
    }>;
    getRecordsByBatch(batchId: string): Promise<{
        reviewed_by: string | null;
        locked_by: string | null;
        assigned_to: string | null;
        entered_by: string | null;
        id: string;
        property_address: string;
        transaction_date: Date;
        borrower_name: string;
        loan_officer_name: string;
        loan_amount: number;
        nmls_id: number;
        loan_term: number;
        sales_price: number;
        down_payment: number;
        apn: string;
        status: "Pending" | "Verified" | "Flagged";
        lock_timestamp: Date | null;
        entered_by_date: Date;
        reviewed_by_date: Date;
        created_at: Date;
        updated_at: Date;
        batch_id?: string;
        batch?: import("../batches/entities/batch.entity").Batch;
        entered_by_user?: import("../users/entities/user.entity").User;
        assigned_to_user?: import("../users/entities/user.entity").User;
        reviewed_by_user?: import("../users/entities/user.entity").User;
        locked_by_user?: import("../users/entities/user.entity").User;
    }[]>;
    findOne(id: string): Promise<Record | null>;
}
